{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Sheet 4 Q3","provenance":[],"authorship_tag":"ABX9TyP6rv+BPgU6wH6Gm1zqd5QX"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"PJ2IlIpaNvSK","executionInfo":{"status":"ok","timestamp":1604678822160,"user_tz":0,"elapsed":1024,"user":{"displayName":"Asad Raja","photoUrl":"https://lh3.googleusercontent.com/-qBjKzlIWRd8/AAAAAAAAAAI/AAAAAAAAEkA/VuUBV3qSGTk/s64/photo.jpg","userId":"01745811664429108254"}},"outputId":"b4bab27a-7738-4ca4-fd54-063ea3d14e00","colab":{"base_uri":"https://localhost:8080/","height":304}},"source":["import numpy as np\n","import pandas\n","import matplotlib.pyplot as plt\n","\n","npx, npy = 200, 200\n","x1line = np.linspace(0, 1, npx)\n","x2line = np.linspace(0, 1, npy)\n","x1grid, x2grid = np.meshgrid(x1line, x2line)\n","Xgrid = np.array([x1grid, x2grid]).reshape([2, npx*npy]).T\n","\n","a1 = np.array([1.3, -1, -3])\n","a2 = np.array([-2, 1, 2])\n","a3 = np.array([0.3, 0.1, -0.1])\n","a4 = np.array([0, -1, 1])\n","a5 = np.array([-0.2, 1.5, -1])\n","\n","#Ygrid is defined as the same as Xgrid, except it has 1 \n","#at the beginning - this therefore adds a column of ones to the left\n","Ygrid = np.concatenate([np.ones([npx * npy,1]), Xgrid],axis=1) \n","\n","#calculate each of the five functions as before\n","g1 = np.matmul(a1, Ygrid.T) \n","g2 = np.matmul(a2, Ygrid.T) \n","g3 = np.matmul(a3, Ygrid.T) \n","g4 = np.matmul(a4, Ygrid.T) \n","g5 = np.matmul(a5, Ygrid.T)\n","#combine all five functions together\n","gconc = np.concatenate([[g1], [g2], [g3], [g4], [g5]])\n","print(np.shape(gconc))\n","\n","#define an array which will ultimately contain all of the class numbers\n","omega = np.zeros([1, npx * npy]) \n","for i in range(5):\n","\t#define an array which is one if it belongs to class i, \n","\t#and zero otherwise - set it to ones throughout to start with:\n","\tomhere = np.ones([1, npx*npy]) \n","\t\n","\t#loop through all of the classes\n","\tfor j in range(5):\n","\t\t#if there is another class with a higher value, set it to zero:\n","\t\tomhere[0,gconc[i,:]<gconc[j,:]] = 0\n","\n","\t#set values in omega which correspond to omhere == 1 to that \n","\t#particular category number (i + 1 - remember python is zero indexed). \n","\tomega[omhere == 1] = i + 1\n","#put back onto 2D grid so it can easily be plotted\n","omega = np.reshape(omega, [npx, npy])\n","\n","fig, ax = plt.subplots()\n","plt.contourf(x1line, x2line, omega)\n","plt.colorbar()"],"execution_count":6,"outputs":[{"output_type":"stream","text":["(5, 40000)\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<matplotlib.colorbar.Colorbar at 0x7fa99d4f4208>"]},"metadata":{"tags":[]},"execution_count":6},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]}]}